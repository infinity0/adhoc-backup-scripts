#!/bin/sh
# High-level tools for managing a LUKS block device used for backup
#
# see `help` for summary of subcommands and environment variables

BLK="${BLK:-block}"
BLK_FS="${BLK_FS:-ext4}"
LUKS_CIPHER="${LUKS_CIPHER:-aes-cbc-essiv:sha256}"


if [ -n "$DEBUG" ]; then set -x; fi
set -o errexit

S_UNKNOWN=UNKNOWN
S_NODEV_SSHFS=NODEV_SSHFS
S_NODEV_NBD=NODEV_NBD
S_NODEV_LOCAL=NODEV_LOCAL
S_CRYPT_PREINIT=CRYPT_PREINIT
S_CRYPT_AVAIL=CRYPT_AVAIL
S_CRYPT_STRIP=CRYPT_STRIP
S_PLAIN_MOUNTED=PLAIN_MOUNTED

_rereadvars() {
	BLK_KEY="${BLK}.luks.key"
	BLK_HEADER="${BLK}.luks.header"
	BLK_CLOB="${BLK}.luks.clobber"
	BLK_DEV="${BLK}"
	BLK_CRYPT="${BLK}_crypt"  # crypt device name
	DEV=$(readlink "$BLK_DEV" || true)
	DST=$(readlink "${BLK}.mnt" || true)
}

_state() {
	if [ -b "$BLK_DEV" ]; then
		if mountpoint -q "$DST"; then
			echo $S_PLAIN_MOUNTED
			return
		fi
		if [ ! -r "$DEV" ]; then
			echo >&2 "warning: no read permission on device $DEV"
			echo $S_UNKNOWN
			return
		fi
		case $(file -s "$DEV") in
		*\\0* )	echo $S_CRYPT_PREINIT;;
		*LUKS* )	echo $S_CRYPT_AVAIL;;
		*data*)	echo $S_CRYPT_STRIP;;
		*)	echo $S_UNKNOWN;;
		esac
	else
		if [ -f "$BLK.conf.sshfs" ]; then
			echo $S_NODEV_SSHFS
		elif [ -f "$BLK.conf.nbd" ]; then
			echo $S_NODEV_NBD
		elif [ -f "$BLK.img" ]; then
			echo $S_NODEV_LOCAL
		else
			echo $S_UNKNOWN
		fi
	fi
}

_state_in() {
	local current=$(_state)
	for i in "$@"; do test "$i" = "$current" && return 0; done
	return 1
}

_precond() { _state_in "$@" || { echo >&2 "precondition not fufilled: current state not one of $@"; exit 1; }; }
# sleep 0.2 since udev can take a while to apply settings
_postcond() { sleep 0.2; _state_in "$@" || { echo >&2 "postcondition not fufilled: current state not one of $@"; exit 100; }; }

################################################################################
## nbd / sshfs helper functions (deprecated DO NOT USE)
################################################################################

sshfs_preexpose() {
	_precond $S_NODEV_SSHFS
	sshfs -p "$PORT" "$HOST:$SRC" "$DST" -o allow_root -o reconnect
	_postcond $S_NODEV_LOCAL
}

sshfs_preunexpose() {
	_precond $S_NODEV_LOCAL
	fusermount -u "$DST"
	_postcond $S_NODEV_SSHFS
}

nbd_expose() {
	_precond $S_NODEV_NBD
	## TODO: START SERVER on remote side
	DEV="${DEV:-/dev/nbd0}"
	nbd-client -c "$DEV" || { echo >&2 "device $DEV not available"; exit 1; }
	ssh -fNT -L localhost:36485:localhost:36485 -p "$PORT" "$HOST"
	nbd-client localhost 36485 "$DEV"
	_postcond $S_CRYPT_PREINIT $S_CRYPT_AVAIL $S_CRYPT_STRIP
}

nbd_unexpose() {
	_precond $S_CRYPT_PREINIT $S_CRYPT_AVAIL $S_CRYPT_STRIP
	nbd-client -d "$DEV"
	## TODO: STOP SERVER on remote side
	_postcond $S_NODEV_NBD
}

################################################################################
## file helper functions
################################################################################

file_expose() {
	_precond $S_NODEV_LOCAL
	local DEV=$(sudo losetup --show -f "$BLK.img" || exit 1)
	ln -sf "$DEV" "$BLK_DEV"
	_postcond $S_CRYPT_PREINIT $S_CRYPT_AVAIL $S_CRYPT_STRIP
}

file_unexpose() {
	_precond $S_CRYPT_PREINIT $S_CRYPT_AVAIL $S_CRYPT_STRIP
	sudo losetup -d "$DEV"
	rm -f "$BLK_DEV"
	_postcond $S_NODEV_LOCAL
}

file_init() {
	_precond $S_UNKNOWN
	local MB="$1"
	dd if=/dev/zero of="$BLK.img" seek="$MB" bs=1048576 count=0
	_postcond $S_NODEV_LOCAL
}

file_expand2fs() {
	_precond $S_CRYPT_AVAIL
	# needs to be run on actual image file
	local MB="$1"
	local osz=$(stat -L -c %s "$BLK.img")
	test "$(expr "$MB" \* 1048576)" -gt "$osz" || { echo >&2 "won't shrink due to higher risk of data loss; do this yourself manually"; exit 1; }
	file_unexpose || true
	dd if=/dev/zero count=0 of="$BLK.img" seek="$MB" bs=1048576
	local hsz=$(stat -c %s "$BLK_HEADER")
	local fsz=$(expr \( "$MB" \* 1048576 - "$hsz" \) \/ 1024 )
	file_expose
	_rereadvars
	sudo cryptsetup luksOpen -d "$BLK_KEY" "$DEV" "$BLK_CRYPT"
	resize2fs "/dev/mapper/$BLK_CRYPT" "$fsz"
	sudo cryptsetup luksClose "$BLK_CRYPT"
	_postcond $S_CRYPT_AVAIL
}

################################################################################
## main luksblk functions
################################################################################

blk_init() {
	_precond $S_CRYPT_PREINIT
	test -f "$BLK_KEY" || { echo >&2 "key file not found: $BLK_KEY"; exit 1; }
	rm -f "$BLK_HEADER"
	local key_size=256
	if echo "$LUKS_CIPHER" | grep -q xts; then key_size=512; fi
	echo | sudo cryptsetup luksFormat -c "$LUKS_CIPHER" -s "$key_size" -h sha256 "$DEV" "$BLK_KEY"
	sudo cryptsetup luksHeaderBackup -d "$BLK_KEY" --header-backup-file "$BLK_HEADER" "$DEV"
	sudo cryptsetup luksOpen -d "$BLK_KEY" "$DEV" "$BLK_CRYPT"
	"mkfs.$BLK_FS" "/dev/mapper/$BLK_CRYPT"
	sudo cryptsetup luksClose "$BLK_CRYPT"
	_postcond $S_CRYPT_AVAIL
}

blk_header() {
	_precond $S_CRYPT_AVAIL
	rm -f "$BLK_HEADER"
	sudo cryptsetup luksHeaderBackup -d "$BLK_KEY" --header-backup-file "$BLK_HEADER" "$DEV"
	_postcond $S_CRYPT_AVAIL
}

blk_mount() {
	_precond $S_CRYPT_AVAIL
	sudo cryptsetup luksOpen -d "$BLK_KEY" "$DEV" "$BLK_CRYPT"
	sudo mount "/dev/mapper/$BLK_CRYPT" "$DST"
	_postcond $S_PLAIN_MOUNTED
}

blk_umount() {
	_precond $S_PLAIN_MOUNTED
	sudo umount "/dev/mapper/$BLK_CRYPT" || true
	sudo cryptsetup luksClose "$BLK_CRYPT"
	_postcond $S_CRYPT_AVAIL
}

blk_strip() {
	_precond $S_CRYPT_AVAIL
	local sz=$(stat -c %s "$BLK_HEADER")
	test -f "$BLK_CLOB" || dd if=/dev/urandom of="$BLK_CLOB" bs=1 count="$sz"
	sudo dd if="$BLK_CLOB" of="$BLK_DEV" bs=1 count="$sz" conv=notrunc
	_postcond $S_CRYPT_STRIP
}

blk_unstrip() {
	_precond $S_CRYPT_STRIP
	# must be mounted
	local sz=$(stat -c %s "$BLK_HEADER")
	sudo dd if="$BLK_HEADER" of="$BLK_DEV" bs=1 count="$sz" conv=notrunc
	_postcond $S_CRYPT_AVAIL
}

_rereadvars
subcmd="$1"; test -n "$subcmd" && shift
case "$subcmd" in
file_*)	"$subcmd" "$@";;
init|header|mount|umount|strip|unstrip)	"blk_$subcmd" "$@";;
status)
	case $(_state) in
	$S_UNKNOWN) echo "unknown status";;
	$S_NODEV_SSHFS) echo "unavailable device, from sshfs";;
	$S_NODEV_NBD) echo "unavailable device, from network";;
	$S_NODEV_LOCAL) echo "unavailable device, from image file";;
	$S_CRYPT_PREINIT) echo "uninitialised device";;
	$S_CRYPT_AVAIL) echo "crypt device, unmounted";;
	$S_CRYPT_STRIP) echo "stripped crypt device";;
	$S_PLAIN_MOUNTED) echo "crypt device, mounted";;
	esac
	;;
*)	cat <<'EOF'
Usage: [<VAR>=<val>] $0 <SUBCMD> [<ARGS>]

Subcommands:
init            LUKS-format the device, and create a new filesystem inside it
header          Re-backup the LUKS header
mount           Open the crypt device and mount the filesystem
umount          Unmount the filesystem and close the crypt device
strip           Clobber the LUKS header with random data, with backup
unstrip         Restore the LUKS header from the backup

Subcommands ("file" helpers):
file_init <sz>  Create a file as a block device image, <sz> in MiB
file_expose     Expose the file as a loopback block device
file_unexpose   Unexpose the loopback device
file_expand2fs  Expand the file image and the encrypted ext2+ fs within it

Subcommands ("LVM" helpers):
lvm_init <sz>   [TODO] Create an LV as a block device, <sz> in MiB
lvm_expand2fs   [TODO] Expand an LV and the encrypted ext2+ fs within it

Environment variables:
BLK             Path to symlink to your block device, default 'block'
BLK_FS          (setup only) set the filesystem type, default ext4
LUKS_CIPHER     (setup only) set the cipher spec, default aes-cbc-essiv:sha256

Files:
${block}                symlink to block device (from BLK)
${block}.luks.key       LUKS key for slot 0
${block}.luks.header    LUKS header
${block}.luks.clobber   random data to clobber LUKS header with
${block}.mnt            symlink to mount destination
${block}.img            device image file (or symlink to it)
${block}.conf.sshfs     [deprecated] env var presets for SSHFS
${block}.conf.nbd       [deprecated] env var presets for nbd
EOF
	;;
esac
